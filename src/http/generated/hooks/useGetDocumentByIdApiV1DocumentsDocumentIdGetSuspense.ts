/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  GetDocumentByIdApiV1DocumentsDocumentIdGetQueryResponse,
  GetDocumentByIdApiV1DocumentsDocumentIdGetPathParams,
  GetDocumentByIdApiV1DocumentsDocumentIdGet422,
} from '../types/GetDocumentByIdApiV1DocumentsDocumentIdGet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryKey = (document_id: GetDocumentByIdApiV1DocumentsDocumentIdGetPathParams['document_id']) =>
  [{ url: '/api/v1/documents/:document_id', params: { document_id: document_id } }] as const

export type GetDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryKey = ReturnType<typeof getDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryKey>

/**
 * @description Retrieve document metadata and upload information from MongoDB.**Returns:**- Document metadata (file name, MIME type, size)- Upload timestamps and status- S3 storage information and task reference**Use Cases:**- Access document metadata for administrative purposes- Get S3 storage details for direct access- Cross-reference with task tracking systems
 * @summary Get document metadata and storage information
 * {@link /api/v1/documents/:document_id}
 */
export async function getDocumentByIdApiV1DocumentsDocumentIdGetSuspense(
  document_id: GetDocumentByIdApiV1DocumentsDocumentIdGetPathParams['document_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetDocumentByIdApiV1DocumentsDocumentIdGetQueryResponse,
    ResponseErrorConfig<GetDocumentByIdApiV1DocumentsDocumentIdGet422>,
    unknown
  >({ method: 'GET', url: `/api/v1/documents/${document_id}`, baseURL: 'https://processador-arquivos.sendvers.pro', ...requestConfig })
  return res.data
}

export function getDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryOptions(
  document_id: GetDocumentByIdApiV1DocumentsDocumentIdGetPathParams['document_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryKey(document_id)
  return queryOptions<
    GetDocumentByIdApiV1DocumentsDocumentIdGetQueryResponse,
    ResponseErrorConfig<GetDocumentByIdApiV1DocumentsDocumentIdGet422>,
    GetDocumentByIdApiV1DocumentsDocumentIdGetQueryResponse,
    typeof queryKey
  >({
    enabled: !!document_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getDocumentByIdApiV1DocumentsDocumentIdGetSuspense(document_id, config)
    },
  })
}

/**
 * @description Retrieve document metadata and upload information from MongoDB.**Returns:**- Document metadata (file name, MIME type, size)- Upload timestamps and status- S3 storage information and task reference**Use Cases:**- Access document metadata for administrative purposes- Get S3 storage details for direct access- Cross-reference with task tracking systems
 * @summary Get document metadata and storage information
 * {@link /api/v1/documents/:document_id}
 */
export function useGetDocumentByIdApiV1DocumentsDocumentIdGetSuspense<
  TData = GetDocumentByIdApiV1DocumentsDocumentIdGetQueryResponse,
  TQueryKey extends QueryKey = GetDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryKey,
>(
  document_id: GetDocumentByIdApiV1DocumentsDocumentIdGetPathParams['document_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetDocumentByIdApiV1DocumentsDocumentIdGetQueryResponse,
        ResponseErrorConfig<GetDocumentByIdApiV1DocumentsDocumentIdGet422>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryKey(document_id)

  const query = useSuspenseQuery(
    {
      ...(getDocumentByIdApiV1DocumentsDocumentIdGetSuspenseQueryOptions(document_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetDocumentByIdApiV1DocumentsDocumentIdGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}