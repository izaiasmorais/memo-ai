/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  ExtractTextApiV1ExtractTextPostMutationRequest,
  ExtractTextApiV1ExtractTextPostMutationResponse,
  ExtractTextApiV1ExtractTextPostQueryParams,
  ExtractTextApiV1ExtractTextPost422,
} from '../types/ExtractTextApiV1ExtractTextPost.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const extractTextApiV1ExtractTextPostMutationKey = () => [{ url: '/api/v1/extract-text' }] as const

export type ExtractTextApiV1ExtractTextPostMutationKey = ReturnType<typeof extractTextApiV1ExtractTextPostMutationKey>

/**
 * @description Extract text content from PDF documents with metadata and statistics.**Features:**- Page-by-page text extraction with metadata- Configurable text cleaning and normalization- Document statistics (word count, page count)**Use Cases:**- Quick text preview before processing- Content validation and quality assessment
 * @summary Extract text from PDF document
 * {@link /api/v1/extract-text}
 */
export async function extractTextApiV1ExtractTextPost(
  data: ExtractTextApiV1ExtractTextPostMutationRequest,
  params?: ExtractTextApiV1ExtractTextPostQueryParams,
  config: Partial<RequestConfig<ExtractTextApiV1ExtractTextPostMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof value === 'string' || (value as unknown) instanceof Blob) {
        formData.append(key, value as unknown as string | Blob)
      }
    })
  }
  const res = await request<
    ExtractTextApiV1ExtractTextPostMutationResponse,
    ResponseErrorConfig<ExtractTextApiV1ExtractTextPost422>,
    ExtractTextApiV1ExtractTextPostMutationRequest
  >({
    method: 'POST',
    url: `/api/v1/extract-text`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    params,
    data: formData,
    ...requestConfig,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  })
  return res.data
}

/**
 * @description Extract text content from PDF documents with metadata and statistics.**Features:**- Page-by-page text extraction with metadata- Configurable text cleaning and normalization- Document statistics (word count, page count)**Use Cases:**- Quick text preview before processing- Content validation and quality assessment
 * @summary Extract text from PDF document
 * {@link /api/v1/extract-text}
 */
export function useExtractTextApiV1ExtractTextPost<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ExtractTextApiV1ExtractTextPostMutationResponse,
      ResponseErrorConfig<ExtractTextApiV1ExtractTextPost422>,
      { data: ExtractTextApiV1ExtractTextPostMutationRequest; params?: ExtractTextApiV1ExtractTextPostQueryParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<ExtractTextApiV1ExtractTextPostMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? extractTextApiV1ExtractTextPostMutationKey()

  return useMutation<
    ExtractTextApiV1ExtractTextPostMutationResponse,
    ResponseErrorConfig<ExtractTextApiV1ExtractTextPost422>,
    { data: ExtractTextApiV1ExtractTextPostMutationRequest; params?: ExtractTextApiV1ExtractTextPostQueryParams },
    TContext
  >(
    {
      mutationFn: async ({ data, params }) => {
        return extractTextApiV1ExtractTextPost(data, params, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}