/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  UploadFileApiV1UploadFilePostMutationRequest,
  UploadFileApiV1UploadFilePostMutationResponse,
  UploadFileApiV1UploadFilePost422,
} from '../types/UploadFileApiV1UploadFilePost.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const uploadFileApiV1UploadFilePostMutationKey = () => [{ url: '/api/v1/upload/file' }] as const

export type UploadFileApiV1UploadFilePostMutationKey = ReturnType<typeof uploadFileApiV1UploadFilePostMutationKey>

/**
 * @description Uploads files to S3-compatible cloud storage for later processing.**Supported Files:** PDF documents, video files (MP4, AVI, WebM)**Features:**- Asynchronous upload with progress tracking- Optional webhook notifications for real-time updates- Automatic MIME type detection and metadata extraction**Next Steps:** Use `/process/{document_id}` to begin content extraction and indexing.
 * @summary Upload file to cloud storage
 * {@link /api/v1/upload/file}
 */
export async function uploadFileApiV1UploadFilePost(
  data: UploadFileApiV1UploadFilePostMutationRequest,
  config: Partial<RequestConfig<UploadFileApiV1UploadFilePostMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof value === 'string' || (value as unknown) instanceof Blob) {
        formData.append(key, value as unknown as string | Blob)
      }
    })
  }
  const res = await request<
    UploadFileApiV1UploadFilePostMutationResponse,
    ResponseErrorConfig<UploadFileApiV1UploadFilePost422>,
    UploadFileApiV1UploadFilePostMutationRequest
  >({
    method: 'POST',
    url: `/api/v1/upload/file`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    data: formData,
    ...requestConfig,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  })
  return res.data
}

/**
 * @description Uploads files to S3-compatible cloud storage for later processing.**Supported Files:** PDF documents, video files (MP4, AVI, WebM)**Features:**- Asynchronous upload with progress tracking- Optional webhook notifications for real-time updates- Automatic MIME type detection and metadata extraction**Next Steps:** Use `/process/{document_id}` to begin content extraction and indexing.
 * @summary Upload file to cloud storage
 * {@link /api/v1/upload/file}
 */
export function useUploadFileApiV1UploadFilePost<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UploadFileApiV1UploadFilePostMutationResponse,
      ResponseErrorConfig<UploadFileApiV1UploadFilePost422>,
      { data: UploadFileApiV1UploadFilePostMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UploadFileApiV1UploadFilePostMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? uploadFileApiV1UploadFilePostMutationKey()

  return useMutation<
    UploadFileApiV1UploadFilePostMutationResponse,
    ResponseErrorConfig<UploadFileApiV1UploadFilePost422>,
    { data: UploadFileApiV1UploadFilePostMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return uploadFileApiV1UploadFilePost(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}