/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { SimpleHealthCheckHealthcheckGetQueryResponse } from '../types/SimpleHealthCheckHealthcheckGet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const simpleHealthCheckHealthcheckGetQueryKey = () => [{ url: '/healthcheck' }] as const

export type SimpleHealthCheckHealthcheckGetQueryKey = ReturnType<typeof simpleHealthCheckHealthcheckGetQueryKey>

/**
 * @description Checks only if the API is responding
 * @summary Simple health check
 * {@link /healthcheck}
 */
export async function simpleHealthCheckHealthcheckGet(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<SimpleHealthCheckHealthcheckGetQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/healthcheck`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    ...requestConfig,
  })
  return res.data
}

export function simpleHealthCheckHealthcheckGetQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = simpleHealthCheckHealthcheckGetQueryKey()
  return queryOptions<SimpleHealthCheckHealthcheckGetQueryResponse, ResponseErrorConfig<Error>, SimpleHealthCheckHealthcheckGetQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return simpleHealthCheckHealthcheckGet(config)
    },
  })
}

/**
 * @description Checks only if the API is responding
 * @summary Simple health check
 * {@link /healthcheck}
 */
export function useSimpleHealthCheckHealthcheckGet<
  TData = SimpleHealthCheckHealthcheckGetQueryResponse,
  TQueryData = SimpleHealthCheckHealthcheckGetQueryResponse,
  TQueryKey extends QueryKey = SimpleHealthCheckHealthcheckGetQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<SimpleHealthCheckHealthcheckGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? simpleHealthCheckHealthcheckGetQueryKey()

  const query = useQuery(
    {
      ...(simpleHealthCheckHealthcheckGetQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}