/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  RevokeTaskApiV1TasksTaskIdDeleteMutationResponse,
  RevokeTaskApiV1TasksTaskIdDeletePathParams,
  RevokeTaskApiV1TasksTaskIdDeleteQueryParams,
  RevokeTaskApiV1TasksTaskIdDelete422,
} from '../types/RevokeTaskApiV1TasksTaskIdDelete.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const revokeTaskApiV1TasksTaskIdDeleteMutationKey = () => [{ url: '/api/v1/tasks/{task_id}' }] as const

export type RevokeTaskApiV1TasksTaskIdDeleteMutationKey = ReturnType<typeof revokeTaskApiV1TasksTaskIdDeleteMutationKey>

/**
 * @description Cancel a running task or prevent a pending task from executing.**Parameters:** If `terminate` is set to `true`, the task will be forcefully terminated.**Use Cases:**- Cancel stuck or long-running tasks- Stop incorrect processing operations- Free up worker resources for priority tasks**Warning:** Force termination may leave files or database records in an inconsistent state.
 * @summary Cancel/revoke running task
 * {@link /api/v1/tasks/:task_id}
 */
export async function revokeTaskApiV1TasksTaskIdDelete(
  task_id: RevokeTaskApiV1TasksTaskIdDeletePathParams['task_id'],
  params?: RevokeTaskApiV1TasksTaskIdDeleteQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<RevokeTaskApiV1TasksTaskIdDeleteMutationResponse, ResponseErrorConfig<RevokeTaskApiV1TasksTaskIdDelete422>, unknown>({
    method: 'DELETE',
    url: `/api/v1/tasks/${task_id}`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    params,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Cancel a running task or prevent a pending task from executing.**Parameters:** If `terminate` is set to `true`, the task will be forcefully terminated.**Use Cases:**- Cancel stuck or long-running tasks- Stop incorrect processing operations- Free up worker resources for priority tasks**Warning:** Force termination may leave files or database records in an inconsistent state.
 * @summary Cancel/revoke running task
 * {@link /api/v1/tasks/:task_id}
 */
export function useRevokeTaskApiV1TasksTaskIdDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      RevokeTaskApiV1TasksTaskIdDeleteMutationResponse,
      ResponseErrorConfig<RevokeTaskApiV1TasksTaskIdDelete422>,
      { task_id: RevokeTaskApiV1TasksTaskIdDeletePathParams['task_id']; params?: RevokeTaskApiV1TasksTaskIdDeleteQueryParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? revokeTaskApiV1TasksTaskIdDeleteMutationKey()

  return useMutation<
    RevokeTaskApiV1TasksTaskIdDeleteMutationResponse,
    ResponseErrorConfig<RevokeTaskApiV1TasksTaskIdDelete422>,
    { task_id: RevokeTaskApiV1TasksTaskIdDeletePathParams['task_id']; params?: RevokeTaskApiV1TasksTaskIdDeleteQueryParams },
    TContext
  >(
    {
      mutationFn: async ({ task_id, params }) => {
        return revokeTaskApiV1TasksTaskIdDelete(task_id, params, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}