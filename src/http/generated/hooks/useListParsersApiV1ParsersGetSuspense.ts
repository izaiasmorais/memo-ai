/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  ListParsersApiV1ParsersGetQueryResponse,
  ListParsersApiV1ParsersGetQueryParams,
  ListParsersApiV1ParsersGet422,
} from '../types/ListParsersApiV1ParsersGet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const listParsersApiV1ParsersGetSuspenseQueryKey = (params?: ListParsersApiV1ParsersGetQueryParams) =>
  [{ url: '/api/v1/parsers' }, ...(params ? [params] : [])] as const

export type ListParsersApiV1ParsersGetSuspenseQueryKey = ReturnType<typeof listParsersApiV1ParsersGetSuspenseQueryKey>

/**
 * @description Lists all available parsers in the system with optional filters.**Available Filters:**- `mime_type`: Filter by specific MIME type (e.g., "application/pdf")- `strategy`: Filter by specific strategy (e.g., "basic", "ocr", "transcription")**Response Organization:**```json{  "parsers": {    "PDFParser": {      "parser_class": "PDFParser",      "mime_types": ["application/pdf"],      "strategies": ["basic", "ocr"],      "default_strategy": "basic",      "module": "src.services.processors.parsers.pdf.pdf_parser"    },    "AudioParser": {      "parser_class": "AudioParser",       "mime_types": ["audio/mpeg", "audio/wav", "audio/mp4"],      "strategies": ["transcription"],      "default_strategy": "transcription",      "module": "src.services.processors.parsers.audio.audio_parser"    }  },  "summary": {    "total_parsers": 3,    "total_mime_types": 15,    "available_strategies": ["basic", "ocr", "transcription"]  }}```**Use Cases:**- `GET /parsers` - List all parsers- `GET /parsers?mime_type=application/pdf` - Parsers that support PDF- `GET /parsers?strategy=ocr` - Parsers that support OCR- `GET /parsers?mime_type=audio/mpeg&strategy=transcription` - Combined filters
 * @summary List available parsers with optional filters
 * {@link /api/v1/parsers}
 */
export async function listParsersApiV1ParsersGetSuspense(
  params?: ListParsersApiV1ParsersGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListParsersApiV1ParsersGetQueryResponse, ResponseErrorConfig<ListParsersApiV1ParsersGet422>, unknown>({
    method: 'GET',
    url: `/api/v1/parsers`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    params,
    ...requestConfig,
  })
  return res.data
}

export function listParsersApiV1ParsersGetSuspenseQueryOptions(
  params?: ListParsersApiV1ParsersGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = listParsersApiV1ParsersGetSuspenseQueryKey(params)
  return queryOptions<
    ListParsersApiV1ParsersGetQueryResponse,
    ResponseErrorConfig<ListParsersApiV1ParsersGet422>,
    ListParsersApiV1ParsersGetQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listParsersApiV1ParsersGetSuspense(params, config)
    },
  })
}

/**
 * @description Lists all available parsers in the system with optional filters.**Available Filters:**- `mime_type`: Filter by specific MIME type (e.g., "application/pdf")- `strategy`: Filter by specific strategy (e.g., "basic", "ocr", "transcription")**Response Organization:**```json{  "parsers": {    "PDFParser": {      "parser_class": "PDFParser",      "mime_types": ["application/pdf"],      "strategies": ["basic", "ocr"],      "default_strategy": "basic",      "module": "src.services.processors.parsers.pdf.pdf_parser"    },    "AudioParser": {      "parser_class": "AudioParser",       "mime_types": ["audio/mpeg", "audio/wav", "audio/mp4"],      "strategies": ["transcription"],      "default_strategy": "transcription",      "module": "src.services.processors.parsers.audio.audio_parser"    }  },  "summary": {    "total_parsers": 3,    "total_mime_types": 15,    "available_strategies": ["basic", "ocr", "transcription"]  }}```**Use Cases:**- `GET /parsers` - List all parsers- `GET /parsers?mime_type=application/pdf` - Parsers that support PDF- `GET /parsers?strategy=ocr` - Parsers that support OCR- `GET /parsers?mime_type=audio/mpeg&strategy=transcription` - Combined filters
 * @summary List available parsers with optional filters
 * {@link /api/v1/parsers}
 */
export function useListParsersApiV1ParsersGetSuspense<
  TData = ListParsersApiV1ParsersGetQueryResponse,
  TQueryKey extends QueryKey = ListParsersApiV1ParsersGetSuspenseQueryKey,
>(
  params?: ListParsersApiV1ParsersGetQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<ListParsersApiV1ParsersGetQueryResponse, ResponseErrorConfig<ListParsersApiV1ParsersGet422>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listParsersApiV1ParsersGetSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(listParsersApiV1ParsersGetSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListParsersApiV1ParsersGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}