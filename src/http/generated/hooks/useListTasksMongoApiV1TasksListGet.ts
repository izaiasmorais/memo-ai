/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  ListTasksMongoApiV1TasksListGetQueryResponse,
  ListTasksMongoApiV1TasksListGetQueryParams,
  ListTasksMongoApiV1TasksListGet422,
} from '../types/ListTasksMongoApiV1TasksListGet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listTasksMongoApiV1TasksListGetQueryKey = (params?: ListTasksMongoApiV1TasksListGetQueryParams) =>
  [{ url: '/api/v1/tasks/list' }, ...(params ? [params] : [])] as const

export type ListTasksMongoApiV1TasksListGetQueryKey = ReturnType<typeof listTasksMongoApiV1TasksListGetQueryKey>

/**
 * @description Get a paginated list of tasks from MongoDB with optional filters.**Available Status Values:**- `uploaded`: File successfully uploaded to S3- `completed`: Processing completed with embeddings generated- `failed`: Upload or processing failed**Available Task Types:**- `upload_file`: File upload task- `process_media`: Media processing task**Note:** For real-time task monitoring, use `/tasks/{task_id}` endpoint.
 * @summary List tasks with filters
 * {@link /api/v1/tasks/list}
 */
export async function listTasksMongoApiV1TasksListGet(
  params?: ListTasksMongoApiV1TasksListGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListTasksMongoApiV1TasksListGetQueryResponse, ResponseErrorConfig<ListTasksMongoApiV1TasksListGet422>, unknown>({
    method: 'GET',
    url: `/api/v1/tasks/list`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    params,
    ...requestConfig,
  })
  return res.data
}

export function listTasksMongoApiV1TasksListGetQueryOptions(
  params?: ListTasksMongoApiV1TasksListGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = listTasksMongoApiV1TasksListGetQueryKey(params)
  return queryOptions<
    ListTasksMongoApiV1TasksListGetQueryResponse,
    ResponseErrorConfig<ListTasksMongoApiV1TasksListGet422>,
    ListTasksMongoApiV1TasksListGetQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listTasksMongoApiV1TasksListGet(params, config)
    },
  })
}

/**
 * @description Get a paginated list of tasks from MongoDB with optional filters.**Available Status Values:**- `uploaded`: File successfully uploaded to S3- `completed`: Processing completed with embeddings generated- `failed`: Upload or processing failed**Available Task Types:**- `upload_file`: File upload task- `process_media`: Media processing task**Note:** For real-time task monitoring, use `/tasks/{task_id}` endpoint.
 * @summary List tasks with filters
 * {@link /api/v1/tasks/list}
 */
export function useListTasksMongoApiV1TasksListGet<
  TData = ListTasksMongoApiV1TasksListGetQueryResponse,
  TQueryData = ListTasksMongoApiV1TasksListGetQueryResponse,
  TQueryKey extends QueryKey = ListTasksMongoApiV1TasksListGetQueryKey,
>(
  params?: ListTasksMongoApiV1TasksListGetQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<ListTasksMongoApiV1TasksListGetQueryResponse, ResponseErrorConfig<ListTasksMongoApiV1TasksListGet422>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listTasksMongoApiV1TasksListGetQueryKey(params)

  const query = useQuery(
    {
      ...(listTasksMongoApiV1TasksListGetQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<ListTasksMongoApiV1TasksListGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}