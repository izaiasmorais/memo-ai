/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  GetTaskDetailApiV1TasksTaskIdGetQueryResponse,
  GetTaskDetailApiV1TasksTaskIdGetPathParams,
  GetTaskDetailApiV1TasksTaskIdGet422,
} from '../types/GetTaskDetailApiV1TasksTaskIdGet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getTaskDetailApiV1TasksTaskIdGetQueryKey = (task_id: GetTaskDetailApiV1TasksTaskIdGetPathParams['task_id']) =>
  [{ url: '/api/v1/tasks/:task_id', params: { task_id: task_id } }] as const

export type GetTaskDetailApiV1TasksTaskIdGetQueryKey = ReturnType<typeof getTaskDetailApiV1TasksTaskIdGetQueryKey>

/**
 * @description Get live task execution status and details from Celery backend.**Returns:**- Current task status (PENDING, STARTED, SUCCESS, FAILURE, REVOKED)- Task execution results and worker information- Start and completion timestamps- Error traceback if the task failed**Use Cases:**- Monitor task progress during execution- Check current status of upload or processing operations- Debug failed tasks with detailed error information**Note:** For historical data, use `/tasks/mongo/{task_id}` endpoint.
 * @summary Get real-time task status from Celery
 * {@link /api/v1/tasks/:task_id}
 */
export async function getTaskDetailApiV1TasksTaskIdGet(
  task_id: GetTaskDetailApiV1TasksTaskIdGetPathParams['task_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetTaskDetailApiV1TasksTaskIdGetQueryResponse, ResponseErrorConfig<GetTaskDetailApiV1TasksTaskIdGet422>, unknown>({
    method: 'GET',
    url: `/api/v1/tasks/${task_id}`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    ...requestConfig,
  })
  return res.data
}

export function getTaskDetailApiV1TasksTaskIdGetQueryOptions(
  task_id: GetTaskDetailApiV1TasksTaskIdGetPathParams['task_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getTaskDetailApiV1TasksTaskIdGetQueryKey(task_id)
  return queryOptions<
    GetTaskDetailApiV1TasksTaskIdGetQueryResponse,
    ResponseErrorConfig<GetTaskDetailApiV1TasksTaskIdGet422>,
    GetTaskDetailApiV1TasksTaskIdGetQueryResponse,
    typeof queryKey
  >({
    enabled: !!task_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getTaskDetailApiV1TasksTaskIdGet(task_id, config)
    },
  })
}

/**
 * @description Get live task execution status and details from Celery backend.**Returns:**- Current task status (PENDING, STARTED, SUCCESS, FAILURE, REVOKED)- Task execution results and worker information- Start and completion timestamps- Error traceback if the task failed**Use Cases:**- Monitor task progress during execution- Check current status of upload or processing operations- Debug failed tasks with detailed error information**Note:** For historical data, use `/tasks/mongo/{task_id}` endpoint.
 * @summary Get real-time task status from Celery
 * {@link /api/v1/tasks/:task_id}
 */
export function useGetTaskDetailApiV1TasksTaskIdGet<
  TData = GetTaskDetailApiV1TasksTaskIdGetQueryResponse,
  TQueryData = GetTaskDetailApiV1TasksTaskIdGetQueryResponse,
  TQueryKey extends QueryKey = GetTaskDetailApiV1TasksTaskIdGetQueryKey,
>(
  task_id: GetTaskDetailApiV1TasksTaskIdGetPathParams['task_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetTaskDetailApiV1TasksTaskIdGetQueryResponse,
        ResponseErrorConfig<GetTaskDetailApiV1TasksTaskIdGet422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getTaskDetailApiV1TasksTaskIdGetQueryKey(task_id)

  const query = useQuery(
    {
      ...(getTaskDetailApiV1TasksTaskIdGetQueryOptions(task_id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetTaskDetailApiV1TasksTaskIdGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}