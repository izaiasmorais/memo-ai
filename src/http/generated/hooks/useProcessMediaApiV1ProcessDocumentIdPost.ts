/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type {
  ProcessMediaApiV1ProcessDocumentIdPostMutationRequest,
  ProcessMediaApiV1ProcessDocumentIdPostMutationResponse,
  ProcessMediaApiV1ProcessDocumentIdPostPathParams,
  ProcessMediaApiV1ProcessDocumentIdPostQueryParams,
  ProcessMediaApiV1ProcessDocumentIdPost422,
} from '../types/ProcessMediaApiV1ProcessDocumentIdPost.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const processMediaApiV1ProcessDocumentIdPostMutationKey = () => [{ url: '/api/v1/process/{document_id}' }] as const

export type ProcessMediaApiV1ProcessDocumentIdPostMutationKey = ReturnType<typeof processMediaApiV1ProcessDocumentIdPostMutationKey>

/**
 * @description Processes uploaded files and generates embeddings for vector search.**Supported Files:** PDF documents, video files (MP4, AVI, WebM)**Parser Strategies:**- `basic`: Fast text extraction for PDFs- `ocr`: OCR-based extraction for scanned documents- `transcription`: Audio transcription for video files- `default`: Automatic selection based on file type**Index Types:**- `traditional`: Standard vector indexing (fastest)- `hybrid`: Dense + sparse vector indexing with reranking (more accurate)
 * @summary Process media file with advanced options
 * {@link /api/v1/process/:document_id}
 */
export async function processMediaApiV1ProcessDocumentIdPost(
  document_id: ProcessMediaApiV1ProcessDocumentIdPostPathParams['document_id'],
  data: ProcessMediaApiV1ProcessDocumentIdPostMutationRequest,
  params?: ProcessMediaApiV1ProcessDocumentIdPostQueryParams,
  config: Partial<RequestConfig<ProcessMediaApiV1ProcessDocumentIdPostMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ProcessMediaApiV1ProcessDocumentIdPostMutationResponse,
    ResponseErrorConfig<ProcessMediaApiV1ProcessDocumentIdPost422>,
    ProcessMediaApiV1ProcessDocumentIdPostMutationRequest
  >({ method: 'POST', url: `/api/v1/process/${document_id}`, baseURL: 'https://processador-arquivos.sendvers.pro', params, data, ...requestConfig })
  return res.data
}

/**
 * @description Processes uploaded files and generates embeddings for vector search.**Supported Files:** PDF documents, video files (MP4, AVI, WebM)**Parser Strategies:**- `basic`: Fast text extraction for PDFs- `ocr`: OCR-based extraction for scanned documents- `transcription`: Audio transcription for video files- `default`: Automatic selection based on file type**Index Types:**- `traditional`: Standard vector indexing (fastest)- `hybrid`: Dense + sparse vector indexing with reranking (more accurate)
 * @summary Process media file with advanced options
 * {@link /api/v1/process/:document_id}
 */
export function useProcessMediaApiV1ProcessDocumentIdPost<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ProcessMediaApiV1ProcessDocumentIdPostMutationResponse,
      ResponseErrorConfig<ProcessMediaApiV1ProcessDocumentIdPost422>,
      {
        document_id: ProcessMediaApiV1ProcessDocumentIdPostPathParams['document_id']
        data: ProcessMediaApiV1ProcessDocumentIdPostMutationRequest
        params?: ProcessMediaApiV1ProcessDocumentIdPostQueryParams
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<ProcessMediaApiV1ProcessDocumentIdPostMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? processMediaApiV1ProcessDocumentIdPostMutationKey()

  return useMutation<
    ProcessMediaApiV1ProcessDocumentIdPostMutationResponse,
    ResponseErrorConfig<ProcessMediaApiV1ProcessDocumentIdPost422>,
    {
      document_id: ProcessMediaApiV1ProcessDocumentIdPostPathParams['document_id']
      data: ProcessMediaApiV1ProcessDocumentIdPostMutationRequest
      params?: ProcessMediaApiV1ProcessDocumentIdPostQueryParams
    },
    TContext
  >(
    {
      mutationFn: async ({ document_id, data, params }) => {
        return processMediaApiV1ProcessDocumentIdPost(document_id, data, params, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}