/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@kubb/plugin-client/clients/axios";
import type {
	TranscribeAudioApiV1TranscribeAudioPostMutationRequest,
	TranscribeAudioApiV1TranscribeAudioPostMutationResponse,
	TranscribeAudioApiV1TranscribeAudioPostQueryParams,
	TranscribeAudioApiV1TranscribeAudioPost422,
} from "../types/TranscribeAudioApiV1TranscribeAudioPost.ts";
import type {
	RequestConfig,
	ResponseErrorConfig,
} from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

export const transcribeAudioApiV1TranscribeAudioPostMutationKey = () =>
	[{ url: "/api/v1/transcribe-audio" }] as const;

export type TranscribeAudioApiV1TranscribeAudioPostMutationKey = ReturnType<
	typeof transcribeAudioApiV1TranscribeAudioPostMutationKey
>;

/**
 * @description Transcribe audio file using external VAD API and parallel processing.**Features:**- Voice Activity Detection (VAD) with configurable threshold.- Parallel processing of audio segments with adaptive worker management based on success rate.**Note:** This endpoint does not use the queue system, so the `document_id` cannot be used for status or result queries.
 * @summary Transcribe audio file
 * {@link /api/v1/transcribe-audio}
 */
export async function transcribeAudioApiV1TranscribeAudioPost(
	data: TranscribeAudioApiV1TranscribeAudioPostMutationRequest,
	params?: TranscribeAudioApiV1TranscribeAudioPostQueryParams,
	config: Partial<
		RequestConfig<TranscribeAudioApiV1TranscribeAudioPostMutationRequest>
	> & { client?: typeof client } = {}
) {
	const { client: request = client, ...requestConfig } = config;

	const formData = new FormData();
	if (data) {
		Object.keys(data).forEach((key) => {
			const value = data[key as keyof typeof data];
			if (typeof value === "string" || (value as unknown) instanceof Blob) {
				formData.append(key, value as unknown as string | Blob);
			}
		});
	}
	const res = await request<
		TranscribeAudioApiV1TranscribeAudioPostMutationResponse,
		ResponseErrorConfig<TranscribeAudioApiV1TranscribeAudioPost422>,
		TranscribeAudioApiV1TranscribeAudioPostMutationRequest
	>({
		method: "POST",
		url: `/api/v1/transcribe-audio`,
		baseURL: "https://processador-arquivos.sendvers.pro",
		params,
		data: formData,
		...requestConfig,
		headers: {
			"Content-Type": "multipart/form-data",
			...requestConfig.headers,
		},
	});
	return res.data;
}

/**
 * @description Transcribe audio file using external VAD API and parallel processing.**Features:**- Voice Activity Detection (VAD) with configurable threshold.- Parallel processing of audio segments with adaptive worker management based on success rate.**Note:** This endpoint does not use the queue system, so the `document_id` cannot be used for status or result queries.
 * @summary Transcribe audio file
 * {@link /api/v1/transcribe-audio}
 */
export function useTranscribeAudioApiV1TranscribeAudioPost<TContext>(
	options: {
		mutation?: UseMutationOptions<
			TranscribeAudioApiV1TranscribeAudioPostMutationResponse,
			ResponseErrorConfig<TranscribeAudioApiV1TranscribeAudioPost422>,
			{
				data: TranscribeAudioApiV1TranscribeAudioPostMutationRequest;
				params?: TranscribeAudioApiV1TranscribeAudioPostQueryParams;
			},
			TContext
		> & { client?: QueryClient };
		client?: Partial<
			RequestConfig<TranscribeAudioApiV1TranscribeAudioPostMutationRequest>
		> & { client?: typeof client };
	} = {}
) {
	const { mutation = {}, client: config = {} } = options ?? {};
	const { client: queryClient, ...mutationOptions } = mutation;
	const mutationKey =
		mutationOptions.mutationKey ??
		transcribeAudioApiV1TranscribeAudioPostMutationKey();

	return useMutation<
		TranscribeAudioApiV1TranscribeAudioPostMutationResponse,
		ResponseErrorConfig<TranscribeAudioApiV1TranscribeAudioPost422>,
		{
			data: TranscribeAudioApiV1TranscribeAudioPostMutationRequest;
			params?: TranscribeAudioApiV1TranscribeAudioPostQueryParams;
		},
		TContext
	>(
		{
			mutationFn: async ({ data, params }) => {
				return transcribeAudioApiV1TranscribeAudioPost(data, params, config);
			},
			mutationKey,
			...mutationOptions,
		},
		queryClient
	);
}
