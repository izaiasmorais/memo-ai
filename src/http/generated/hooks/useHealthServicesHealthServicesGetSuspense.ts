/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { HealthServicesHealthServicesGetQueryResponse } from '../types/HealthServicesHealthServicesGet.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const healthServicesHealthServicesGetSuspenseQueryKey = () => [{ url: '/health/services' }] as const

export type HealthServicesHealthServicesGetSuspenseQueryKey = ReturnType<typeof healthServicesHealthServicesGetSuspenseQueryKey>

/**
 * @description Returns the status of all critical services
 * @summary Check services status
 * {@link /health/services}
 */
export async function healthServicesHealthServicesGetSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<HealthServicesHealthServicesGetQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/health/services`,
    baseURL: 'https://processador-arquivos.sendvers.pro',
    ...requestConfig,
  })
  return res.data
}

export function healthServicesHealthServicesGetSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = healthServicesHealthServicesGetSuspenseQueryKey()
  return queryOptions<HealthServicesHealthServicesGetQueryResponse, ResponseErrorConfig<Error>, HealthServicesHealthServicesGetQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return healthServicesHealthServicesGetSuspense(config)
    },
  })
}

/**
 * @description Returns the status of all critical services
 * @summary Check services status
 * {@link /health/services}
 */
export function useHealthServicesHealthServicesGetSuspense<
  TData = HealthServicesHealthServicesGetQueryResponse,
  TQueryKey extends QueryKey = HealthServicesHealthServicesGetSuspenseQueryKey,
>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<HealthServicesHealthServicesGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? healthServicesHealthServicesGetSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(healthServicesHealthServicesGetSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}